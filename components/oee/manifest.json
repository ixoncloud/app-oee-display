{
  "main": "ixon-se-oee.min.js",
  "version": "1",
  "sheetSettings": {
    "minCols": 1,
    "minRows": 1
  },
  "cardSettings": {
    "minHeight": 100
  },
  "reportSettings": {
    "minCols": 1,
    "minRows": 1
  },
  "inputs": [
    {
      "key": "header",
      "type": "Group",
      "label": "Info",
      "children": [
        {
          "key": "title",
          "type": "String",
          "label": "Title",
          "placeholder": "Leave empty for no title"
        },
        {
          "key": "subtitle",
          "type": "String",
          "label": "Subtitle",
          "placeholder": "Leave empty for no subtitle"
        }
      ]
    },
    {
      "key": "variables",
      "label": "Variables",
      "type": "List",
      "itemType": {
        "key": "variable",
        "label": "Variable",
        "type": "Group",
        "summary": {
          "label": "{{name}}: {{metric.formula}}"
        },
        "children": [
          {
            "key": "name",
            "label": "Name",
            "type": "String"
          },
          {
            "key": "metric",
            "label": "Metric",
            "type": "AggregatedMetric",
            "allowedTypes": ["int", "float"]
          }
        ]
      }
    },
    {
      "key": "calculation",
      "type": "Group",
      "label": "Calculation",
      "children": [
        {
          "key": "availability",
          "type": "Group",
          "label": "Output (decimal representation)",
          "summary": {
            "label": "Availability"
          },
          "children": [
            {
              "key": "formula",
              "type": "String",
              "label": "Formula",
              "placeholder": "x / y * 100",
              "description": "You can use various math operators like: *, /, +, -, ^, tan, sin, cos, log, etc. The full list of possible operators can be found here: https://www.npmjs.com/package/expr-eval#expression-syntax. Use this to calculate the Availability based on the various input variables. Leave empty to skip. Must be in decimal representation"
            }
          ]
        },
        {
          "key": "performance",
          "type": "Group",
          "label": "Output (decimal representation)",
          "summary": {
            "label": "Performance"
          },
          "children": [
            {
              "key": "formula",
              "type": "String",
              "label": "Formula",
              "placeholder": "x / y * 100",
              "description": "You can use various math operators like: *, /, +, -, ^, tan, sin, cos, log, etc. The full list of possible operators can be found here: https://www.npmjs.com/package/expr-eval#expression-syntax. Use this to calculate the Performance based on the various input variables. Leave empty to skip. Must be in decimal representation"
            }
          ]
        },
        {
          "key": "quality",
          "type": "Group",
          "label": "Output",
          "summary": {
            "label": "Quality (decimal representation)"
          },
          "children": [
            {
              "key": "formula",
              "type": "String",
              "label": "Formula",
              "placeholder": "x / y * 100",
              "description": "You can use various math operators like: *, /, +, -, ^, tan, sin, cos, log, etc. The full list of possible operators can be found here: https://www.npmjs.com/package/expr-eval#expression-syntax. Use this to calculate the Quality based on the various input variables. Leave empty to skip. Must be in decimal representation"
            }
          ]
        }
      ]
    }
  ]
}
